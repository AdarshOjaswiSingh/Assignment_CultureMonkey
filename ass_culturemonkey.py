# -*- coding: utf-8 -*-
"""Ass_CultureMonkey.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IpnN3Hyly-E7vTQu6VWdo99_8BqrWVSK
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import re
from collections import Counter
from wordcloud import WordCloud

df = pd.read_csv("dataset_cultureMonkey.csv")

print(df.head())
print(df.info())
print(df.columns)  # For column name verification

df['job_description_text'] = df['job_description_text'].fillna("")
df['seniority_level'] = df['seniority_level'].fillna("Unknown")

def extract_skills(text):
    skills = re.findall(r'\b[A-Za-z\+\.\#]{2,}\b', text)
    return [s.lower() for s in skills if len(s) > 2]

df['skills'] = df['job_description_text'].apply(extract_skills)

entry_skills = Counter([s for row in df[df['seniority_level'].str.contains("entry", case=False)]['skills'] for s in row])
senior_skills = Counter([s for row in df[df['seniority_level'].str.contains("senior", case=False)]['skills'] for s in row])

entry_top = pd.DataFrame(entry_skills.most_common(10), columns=["Skill", "Frequency"])
senior_top = pd.DataFrame(senior_skills.most_common(10), columns=["Skill", "Frequency"])

plt.figure(figsize=(10,5))
sns.barplot(x='Frequency', y='Skill', data=entry_top)
plt.title("Top 10 Skills in Entry-Level Jobs")
plt.show()

plt.figure(figsize=(10,5))
sns.barplot(x='Frequency', y='Skill', data=senior_top)
plt.title("Top 10 Skills in Senior-Level Jobs")
plt.show()

all_skills = Counter([s for row in df['skills'] for s in row])
print("Top 3 in-demand skills:", all_skills.most_common(3))

all_words = " ".join([" ".join(row) for row in df['skills']])
wordcloud = WordCloud(width=800, height=400).generate(all_words)
plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.title("Common Technical Skills Word Cloud")
plt.show()

# Define frequency thresholds
freq_threshold = 5

# Compute skill frequencies
skill_freq = dict(all_skills)

# Trend score and category function
def classify_skill(skill):
    freq = skill_freq.get(skill.lower(), 0)
    score = freq / max(skill_freq.values())
    category = "established" if freq >= freq_threshold else "emerging"
    return category, round(score, 2)

# Test a sample job_description_text
test_job_description_text = "Experience with PyTorch, TensorFlow, and diffusion models required"
skills = extract_skills(test_job_description_text)
detected = [
    {"skill": s, "category": classify_skill(s)[0], "trend_score": classify_skill(s)[1]}
    for s in skills
]
print(detected)

# Save model data
import pickle
with open("skill_model.pkl", "wb") as f:
    pickle.dump(skill_freq, f)